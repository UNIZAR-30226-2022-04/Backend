generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  username      String        @id @db.VarChar(30)
  password_hash String        @db.VarChar(30)
  email         String        @unique @db.VarChar(40)
  image_ID      Int           @default(0)
  salt          String        @default("")
  mooncoins     Int           @default(100)
  stars         Int           @default(0)
  friend        Friendship[]  @relation("friend")
  himself       Friendship[]  @relation("himself")
  contributor   Paragraph[]   @relation("contributor")
  participant   Participant[] @relation("participant")
  receiver      Petition[]    @relation("receiver")
  questioner    Petition[]    @relation("questioner")
}

model Petition {
  username      String @db.VarChar(30)
  petition_name String @db.VarChar(30)
  receiver      Player @relation("receiver", fields: [petition_name], references: [username], onDelete: Cascade)
  questioner    Player @relation("questioner", fields: [username], references: [username], onDelete: Cascade)

  @@id([username, petition_name])
}

model Friendship {
  username   String @db.VarChar(30)
  friendname String @db.VarChar(30)
  friend     Player @relation("friend", fields: [friendname], references: [username], onDelete: Cascade)
  himself    Player @relation("himself", fields: [username], references: [username], onDelete: Cascade)

  @@id([username, friendname])
}

model Story {
  story_id    Int           @id @default(autoincrement())
  date        DateTime      @default(now())
  contributed Paragraph[]   @relation("contributed")
  story       Participant[] @relation("story")
  quick_match Quick_match?  @relation("quick_match")
  tale        Tale_mode?    @relation("tale")
}

model Participant {
  username    String  @db.VarChar(30)
  story_id    Int
  voted       String  @db.VarChar(30)
  creator     Boolean
  story       Story   @relation("story", fields: [story_id], references: [story_id], onDelete: Cascade)
  participant Player  @relation("participant", fields: [username], references: [username], onDelete: Cascade)

  @@id([username, story_id])
}

model Tale_mode {
  story_id            Int     @id
  max_turns           Int     @default(1)
  max_paragraph_chars Int     @default(50)
  privacy             Boolean @default(false)
  finished            Boolean @default(false)
  scored              Boolean @default(false)
  title               String  @db.VarChar(50)
  turn                Int     @default(0)
  tale                Story   @relation("tale", fields: [story_id], references: [story_id], onDelete: Cascade)
}

model Quick_match {
  story_id    Int   @unique
  mode        Int
  quick_match Story @relation("quick_match", fields: [story_id], references: [story_id], onDelete: Cascade)
}

model Paragraph {
  text        String @db.VarChar(250)
  Score       Int    @default(0)
  turn_number Int    @default(0)
  username    String @db.VarChar(30)
  story_id    Int
  contributed Story  @relation("contributed", fields: [story_id], references: [story_id], onDelete: Cascade)
  contributor Player @relation("contributor", fields: [username], references: [username], onDelete: Cascade)

  @@id([turn_number, username, story_id])
}
